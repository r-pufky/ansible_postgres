---
###############################################################################
# PostgreSQL Includes
###############################################################################
# postgresql.conf files are rendered correctly for all options.
#
# Tests:
# * postgresql.conf - include_dir (all configs) sources directory correctly.
# * postgresql.conf - include_if_exists sources existing and non-existing file
#   correctly.
# * postgresql.conf - include - sources existing file correctly.
# * All options specified with multiple values are rendered multiple times.
# * Service is active and running.

dependency:
  name: 'galaxy'
driver:
  name: 'podman'
provisioner:
  name: 'ansible'
  config_options:
    defaults:
      interpreter_python: 'auto_silent'
      callback_whitelist: 'profile_tasks, timer, yaml'
    ssh_connection:
      pipelining: false
  inventory:
    group_vars:
      all:
        postgres_hba_config:
          - comment: 'unauthenticated local login for testing'
            type: 'local'
            database: 'all'
            user: 'all'
            method: 'trust'
          - comment: 'unauthenticated local login for testing'
            type: 'local'
            database: 'all'
            user: 'all'
            method: 'trust'
          - comment: 'unauthenticated local login for testing'
            type: 'local'
            database: 'all'
            user: 'all'
            method: 'trust'
        postgres_service_confd_path: '{{
            lookup("env", "MOLECULE_SCENARIO_DIRECTORY") ~
            "/files/conf.d"
          }}'
        postgres_config_include_dir:
          - 'conf.d'
        postgres_config_include_if_exists:
          - '/tmp/if_exists.conf'
          - '/tmp/does_not_exist.conf'
        postgres_config_include:
          - '/tmp/include.conf'
platforms:
  - name: 'postgres-debian-12-postgresql_includes'
    image: 'ghcr.io/hifis-net/debian-systemd:12'
    systemd: 'always'
    volumes:
      - '/sys/fs/cgroup:/sys/fs/cgroup:ro'
    command: '/lib/systemd/systemd'
    pre_build_image: true
verifier:
  name: 'ansible'
lint: |
  set -e
  yamllint .
  ansible-lint .
scenario:
  test_sequence:
    # - 'dependency'
    # - 'cleanup'
    - 'destroy'
    - 'syntax'
    - 'create'
    # - 'prepare'
    - 'converge'
    # - 'idempotence'  # systemd services.
    # - 'side_effect'
    - 'verify'
    # - 'cleanup'
    - 'destroy'
