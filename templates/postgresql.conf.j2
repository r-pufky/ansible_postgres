{#
# Postgres will refuse to start with any invalid configuration option, even for
# options that are deprecated (using a new template for an older version) or
# options that don't exist yet (using a current template for a new release).
#
# Process dictionary and cast variables, specifically handling formatting for
# any know variables that are needed.
#
# Jinja2 wart: | int returns 0 if it cannot be cast which is potentially a
#              valid option for multi-type: explicitly return and test 'str'.
# Jinja2 wart: Testing if a bool converted is interpreted as boolean, which
#              fails testing for multi-type: statically compare boolean strings
#              for correct bool test.
#
# postgresql.conf includes are processed differently from pg_*.conf; and
# require quoting. See #18856.
#
# Reference:
# * https://www.postgresql.org/message-id/18856-378db632176b54e5%40postgresql.org
#}
{% for header in _postgres_order %}
{%   for section in _postgres_map | selectattr('value.section', '==', header) | sort(attribute='value.order') %}
{%     if section.value.key in ['include_dir', 'include_if_exists', 'include'] %}
{%       if section.value.raw | length > 0%}
{%         for dir in section.value.raw %}
{{ section.value.key }} '{{ dir }}'
{%         endfor %}
{%       endif %}
{%     elif section.value.hint == 'list of str' %}
{{ section.value.key }}='{{ section.value.parsed }}'
{%     elif section.value.hint in ['int', 'float'] %}
{{ section.value.key }}={{ section.value.raw }}
{%     elif section.value.hint == 'bool' %}
{{ section.value.key }}={{ section.value.raw | lower }}
{%     elif section.value.hint == 'str or int' %}
{%       if section.value.raw | int('str') == 'str' %}
{{ section.value.key }}='{{ section.value.raw }}'
{%       else %}
{{ section.value.key }}={{ section.value.raw }}
{%       endif %}
{%     elif section.value.hint == 'str or bool' %}
{%       if section.value.raw | lower in ['true', 'false'] %}
{{ section.value.key }}={{ section.value.raw | lower }}
{%       else %}
{{ section.value.key }}='{{ section.value.raw }}'
{%       endif %}
{%     else %}
{{ section.value.key }}='{{ section.value.raw }}'
{%     endif %}
{%   endfor %}
{% endfor %}
