---
###############################################################################
# Postgres Global (postgres.conf) Settings
###############################################################################
# Postgres uses the following SIZE or TIME formats for specifications:
#
# Memory units:   B: bytes            Time units:   us: microseconds
# SIZE           kB: kilobytes        TIME          ms: milliseconds
#                MB: megabytes                       s: seconds
#                GB: gigabytes                     min: minutes
#                TB: terabytes                       h: hours
#                                                    d: days
#
# Values without units will use the settings default unit, which can be learned
# from pg_settings.unit (specifiers will automatically be converted to the
# default unit). Case sensitive.
#
# Reference:
# * https://postgresqlco.nf/doc/en/param/

#############################################################################
# File Locations
#############################################################################

# Location of postgres data.
#
# Affected by postgres_srv_purge_enable=true if default location.
#
# Automatically created and initialized if needed.
#
# Default: '/var/lib/postgresql/17/main'.
postgres_cfg_data_directory:
  '/var/lib/postgresql/{{ postgres_srv_version }}/main'

# Location of pg_hba.conf (Host Base Authentication) file.
#
# postgres_cfg_hba_* writes to this location. Affected by
# postgres_srv_purge_enable=true if default location.
#
# Automatically created if needed.
#
# Default: '/etc/postgresql/17/main/pg_hba.conf'.
postgres_cfg_hba_file:
  '/etc/postgresql/{{ postgres_srv_version }}/main/pg_hba.conf'

# Location of pg_ident.conf (Idtentity) file.
#
# postgres_cfg_ident_* writes to this location. Affected by
# postgres_srv_purge_enable=true if default location.
#
# Automatically created if needed.
#
# Default:
#   '/etc/postgresql/{{ postgres_srv_version }}/main/pg_ident.conf'.
postgres_cfg_ident_file:
  '/etc/postgresql/{{ postgres_srv_version }}/main/pg_ident.conf'

# PID file.
#
# Special Case:
#   '': No extra PID file is written.
#
# Automatically created if needed.
#
# Default:
#   '/var/run/postgresql/{{ postgres_srv_version }}-main.pid'
postgres_cfg_external_pid_file:
  '/var/run/postgresql/{{ postgres_srv_version }}-main.pid'

#############################################################################
# Connections & Authentication
#############################################################################

# Listen addresses.
#
# Special Case:
#   []: Empty will allow only socket connections.
#
# Values:
#           *: Listen on all interfaces.
#     0.0.0.0: Listen on all IPv4 addresses.
#        '::': Listen on all IPv6 addresses.
#        {IP}: Listen on IPv4/IPv4 address.
#   localhost: Listen on localhost.
#      {HOST}: Listen on specified hostname.
#
# Default:
#   - 'localhost'
postgres_cfg_listen_addresses:
  - 'localhost'

# TCP list port. Default: 5432.
postgres_cfg_port: 5432

# Max number of concurrent connections. Default: 100.
postgres_cfg_max_connections: 100

# Number of reserved connections for privileged roles.
#
# Roles must have pg_use_reserved_connections.
#
# Default: 0.
postgres_cfg_reserved_connections: 0

# Number of superuser reserved connections. Default: 3.
postgres_cfg_superuser_reserved_connections: 3

# List of directories where Unix-domain sockets will be created.
#
# Special Case:
#   ^@: Sockets starting with @ creates a socket in the abstract namespace.
#
# Default:
#   - '/var/run/postgresql'
postgres_cfg_unix_socket_directories:
  - '/var/run/postgresql'

# Unix-domain socket group. Default: ''.
postgres_cfg_unix_socket_group: ''

# Octal Unix socket permissions. Default: '0777'.
postgres_cfg_unix_socket_permissions: '0777'

# Enable Bonjour advertisements? Default: False.
postgres_cfg_bonjour: false

# Bonjour service name. Default: ''.
postgres_cfg_bonjour_name: ''

#############################################################################
# TCP settings
#############################################################################

# Time between issuing TCP keepalives (seconds). Default: 0 (system default).
postgres_cfg_tcp_keepalives_idle: 0

# Time between TCP keepalive retransmits (seconds).
#
# Default: 0 (system default).
postgres_cfg_tcp_keepalives_interval: 0

# Max number of TCP keepalive retransmits. Default: 0 (system default).
postgres_cfg_tcp_keepalives_count: 0

# TCP user timeout (ms). Default: 0 (system default).
postgres_cfg_tcp_user_timeout: 0

# Time between client disconnection checks when running queries.
#
# Default: 0 (never).
postgres_cfg_client_connection_check_interval: 0

#############################################################################
# Authentication
#############################################################################

# Max allowed time to complete client authentication.
#
# Values:
#   {TIME}: TIME specification, between 1s and 600s (10min).
#
# Default: '1min'.
postgres_cfg_authentication_timeout: '1min'

# Algorithm for encrypting passwords.
#
# Values:
#            md5: MD5 hash.
#   scram-sha-25: SCRAM-SHA-256 hash (default).
#
# Default: 'scram-sha-256'.
postgres_cfg_password_encryption: 'scram-sha-256'

# Iteration count for SCRAM secret generation. Default: 4096.
postgres_cfg_scram_iterations: 4096

# Location of the Kerberos server key file.
#
# Default: 'FILE:${sysconfdir}/krb5.keytab'.
postgres_cfg_krb_server_keyfile: 'FILE:${sysconfdir}/krb5.keytab'

# Treat Kerberos usernames as case-insensitive? Default: False.
postgres_cfg_krb_caseins_users: false

# Accpet GSSAPI from the client? Default: False.
postgres_cfg_gss_accept_delegation: false

# Enable SSL connections? Default: True.
postgres_cfg_ssl: true

# SSL certificate authority file.
#
# Use postgres_srv_confd_path to import a custom CA or manage in a
# separate role.
#
# Default: '' (none).
postgres_cfg_ssl_ca_file: ''

# SSL service certificate file.
#
# Use postgres_srv_confd_path to import a custom CA or manage in a
# separate role.
#
# Default: '/etc/ssl/certs/ssl-cert-snakeoil.pem'.
postgres_cfg_ssl_cert_file: '/etc/ssl/certs/ssl-cert-snakeoil.pem'

# SSL certificate revocation list file.
#
# Use postgres_srv_confd_path to import a custom CA or manage in a
# separate role.
#
# Default: '' (disabled).
postgres_cfg_ssl_crl_file: ''

# SSL certificate revocation list directory.
#
# Use postgres_srv_confd_path to import a custom CA or manage in a
# separate role.
#
# Default: '' (disabled).
postgres_cfg_ssl_crl_dir: ''

# SSL server private Key.
#
# Use postgres_srv_confd_path to import a custom CA or manage in a
# separate role.
#
# Default: '/etc/ssl/private/ssl-cert-snakeoil.key'.
postgres_cfg_ssl_key_file: '/etc/ssl/private/ssl-cert-snakeoil.key'

# List of Allowed SSL ciphers.
#
# Default:
#   - 'HIGH'
#   - 'MEDIUM'
#   - '+3DES'
#   - '!aNULL'
postgres_cfg_ssl_ciphers:
  - 'HIGH'
  - 'MEDIUM'
  - '+3DES'
  - '!aNULL'

# SSL prefer server ciphers? Default: True.
postgres_cfg_ssl_prefer_server_ciphers: true

# SSL ECDH curve to use.
#
# List curves with 'openssl ecparam -list_curves', (not all are usable in
# TLS).
#
# Values:
#   prime256v1: NIST P-256 (default).
#    secp384r1: NIST P-384.
#    secp521r1: NIST P-521.
#
#  Default: 'prime256v1'.
postgres_cfg_ssl_ecdh_curve: 'prime256v1'

# SSL minimum protocol version to use.
#
# Values:
#     TLSv1: TLSv1.
#   TLSv1.1: TLSv1.1.
#   TLSv1.2: TLSv1.2 (default).
#   TLSv1.3: TLSv1.3.
#
# Default: 'TLSv1.2'.
postgres_cfg_ssl_min_protocol_version: 'TLSv1.2'

# SSL Max protocal version.
#
# Values:
#        '': Use any version (default).
#     TLSv1: TLSv1.
#   TLSv1.1: TLSv1.1.
#   TLSv1.2: TLSv1.2.
#   TLSv1.3: TLSv1.3.
#
# Default: '' (any).
postgres_cfg_ssl_max_protocol_version: ''

# Location of SSL DH parameters file. Default: ''.
postgres_cfg_ssl_dh_params_file: ''

# Command to obtain passphrases for SSL. Default: ''.
postgres_cfg_ssl_passphrase_command: ''

# Execute ssl_passphrase_command during reload?
#
# Default: False.
postgres_cfg_ssl_passphrase_command_supports_reload: false

#############################################################################
# Resource Usage (except WAL)
#############################################################################

# Number of shared memory buffers used by the server.
#
# Values:
#   {SIZE}: SIZE specification, minimum 128kB.
#
# Default: '128MB'.
postgres_cfg_shared_buffers: '128MB'

# Enable huge page memory support?
#
# Values:
#    True: Require huge pages to start server.
#   False: Disabled.
#   'try': Try to enable but do not fail (default).
#
# Default: 'try'.
postgres_cfg_huge_pages: 'try'

# Huge page request size.
#
# Values:
#   {SIZE}: SIZE specification.
#        0: Use system huge page size (default).
#
# Default: 0.
postgres_cfg_huge_page_size: 0

# Max number of temporary buffers used by each session.
#
# Values:
#   {SIZE}: SIZE specification, minimum 800kB.
#
# Default: '8MB'.
postgres_cfg_temp_buffers: '8MB'

# Max number of simultaneously prepared transactions.
#
# It is not advisable to set max_prepared_transactions
# nonzero unless you actively intend to use prepared transactions.  If you
# are using prepared transactions, you will probably want
# max_prepared_transactions to be at least as large as max_connections, so
# that every session can have a prepared transaction pending.
#
# Values:
#   0: Disabled (default).
#
# Default: 0.
postgres_cfg_max_prepared_transactions: 0

# Max memory to be used for query workspaces.
#
# Values:
#   {SIZE}: SIZE specification, minimum 64kB.
#
# Default: '4MB'.
postgres_cfg_work_mem: '4MB'

# Multiple of work_mem to use for hash tables.
#
# Values:
#   {FLOAT}: Memory multipler, 1-1000.0.
#
# Default: 2.0.
postgres_cfg_hash_mem_multiplier: 2.0

# Max memory to be used for maintenance operations.
#
# Values:
#   {SIZE}: SIZE specification, minimum 64kB.
#
# Default: '64MB'.
postgres_cfg_maintenance_work_mem: '64MB'

# Max memory to be used by each autovacuum worker process.
#
# Values:
#   {SIZE}: SIZE specification, minimum 64kB.
#       -1: Use maintenance_work_mem (default).
#
# Default: -1.
postgres_cfg_autovacuum_work_mem: -1

# Max memory to be used for logical decoding.
#
# Values:
#   {SIZE}: SIZE specification, minimum 64kB.
#
# Default: '64MB'.
postgres_cfg_logical_decoding_work_mem: '64MB'

# Max stack depth.
#
# Ideal setting for this parameter is the actual stack size limit enforced by
# the kernel (as set by ulimit -s or local equivalent), less a safety margin
# of a megabyte or so.
#
# Values:
#   {SIZE}: SIZE specification, minimum 100kB.
#
# Default: '2MB'.
postgres_cfg_max_stack_depth: '2MB'

# Shared memory implementation used for the main shared memory region.
#
# Values:
#      mmap: Anonymous shared memory allocated using mmap (default).
#      sysv: System V shared memory allocated via shmget.
#   windows: Windows shared memory.
#
# Default: 'mmap'.
postgres_cfg_shared_memory_type: 'mmap'

# Dynamic shared memory implementation used.
#
# Values:
#     posix: POSIX shared memory allocated using shm_open (default).
#      sysv: System V shared memory allocated via shmget.
#   windows: Windows shared memory.
#      mmap: Memory-mapped files stored in the data directory.
#
# Default: 'posix'.
postgres_cfg_dynamic_shared_memory_type: 'posix'

# Minimum dynamic shared memory reserved at startup.
#
# Values:
#   {SIZE}: SIZE specification.
#        0: None (default).
#
# Default: 0.
postgres_cfg_min_dynamic_shared_memory: 0

# Buffer pool size for VACUUM, ANALYZE, and autovacuum.
#
# Values:
#   {SIZE}: SIZE specification, 128kB-16GB.
#        0: Disabled.
#
# Default: '2MB'.
postgres_cfg_vacuum_buffer_usage_limit: '2MB'

# Commit timestamp buffers (pg_commit_ts).
#
# Values:
#   {SIZE}: SIZE specification, 0kB-1GB.
#        0: auto (default).
#
# Default: 0.
postgres_cfg_commit_timestamp_buffers: 0

# Multiaxct offset buffers (pg_multixact/offsets).
#
# Values:
#   {SIZE}: SIZE specification, 128kB-1GB.
#
# Default: '128kB'.
postgres_cfg_multixact_offset_buffers: '128kB'

# Multiaxct member buffers (pg_multixact/members).
#
# Values:
#   {SIZE}: SIZE specification, 128kB-1GB.
#
# Default: '256kB'.
postgres_cfg_multixact_member_buffers: '256kB'

# LISTEN/NOTIFY message cache buffers (pg_notify).
#
# Values:
#   {SIZE}: SIZE specification, 128kB-1GB.
#
# Default: '128kB'.
postgres_cfg_notify_buffers: '128kB'

# Serializable transaction cache buffers (pg_serial).
#
# Values:
#   {SIZE}: SIZE specification, 128kB-1GB.
#
# Default: '256kB'.
postgres_cfg_serializable_buffers: '256kB'

# Subtransaction buffers (pg_subtrans).
#
# Values:
#   {SIZE}: SIZE specification, 0kB-1GB.
#        0: auto (default).
#
# Default: 0.
postgres_cfg_subtransaction_buffers: 0

# Transaction status cache buffers (pg_xact).
#
# Values:
#   {SIZE}: SIZE specification, 0kB-1GB.
#        0: auto (default).
#
# Default: 0.
postgres_cfg_transaction_buffers: 0

# Per-process temp file space limit.
#
# Values:
#  {SIZE}: SIZE specification.
#      -1: no limit (default).
#
# Default: -1.
postgres_cfg_temp_file_limit: -1

# SLRU page allocation limit for NOTIFY / LISTEN queue. Default: 1048576.
postgres_cfg_max_notify_queue_pages: 1048576

# Max simultaneously files open per process.
#
# Values:
#   64: Minimum value.
#
# Default: 1000.
postgres_cfg_max_files_per_process: 1000

# Vaccum cost delay (ms).
#
# Values:
#   0-100: milliseconds.
#
# Default: 0 (disabled).
postgres_cfg_vacuum_cost_delay: 0

# Vacuum cost for a page found in the buffer cache.
#
# Values:
#   0-10000: credits.
#
# Default: 1.
postgres_cfg_vacuum_cost_page_hit: 1

# Vacuum cost for a page not found in the buffer cache.
#
# Values:
#   0-10000: credits.
#
# Default: 2.
postgres_cfg_vacuum_cost_page_miss: 2

# Vacuum cost for a page dirtied by vacuum.
#
# Values:
#   0-10000: credits.
#
# Default: 20.
postgres_cfg_vacuum_cost_page_dirty: 20

# Vacuum cost amount available before napping.
#
# Values:
#   0-10000: credits.
#
# Default: 200.
postgres_cfg_vacuum_cost_limit: 200

# Background writer sleep time between rounds.
#
# values:
#   {TIME}: TIME specification, 10-10000ms.
#
# Default: '200ms'.
postgres_cfg_bgwriter_delay: '200ms'

# Background writer LRU max pages per round (0 disables). Default: 100.
postgres_cfg_bgwriter_lru_maxpages: 100

# Background writer LRU multiplier.
#
# Multiple of the average buffer usage to free per rounds.
#
# Values:
#   {FLOAT}: Multiplier 0-10.0.
#
# Default: 2.0.
postgres_cfg_bgwriter_lru_multiplier: 2.0

# Amount of WAL written out by WAL writer that triggers a flush (in pages).
#
# Values:
#   {SIZE}: SIZE specification.
#        0: flush immediately (disabled).
#
# Default: '512kB'.
postgres_cfg_bgwriter_flush_after: '512kB'

# Backend flush previously performed writes to disk (in pages).
#
# Values:
#   {SIZE}: SIZE specification.
#        0: Disable forced writeback (default).
#
# Default: 0.
postgres_cfg_backend_flush_after: 0

# Effective IO concurrency.
#
# Simultaneous requests that can be handled efficiently by the disk
# subsystem.
#
# Values:
#   #: Number of requests, 1-1000.
#   0: Disabled.
#
# Default: 1.
postgres_cfg_effective_io_concurrency: 1

# Effective maintenance IO concurrency
#
# Simultaneous requests that can be handled efficiently by the disk
# subsystem.
#
# Values:
#   #: Number of requests, 1-1000.
#   0: Disabled.
#
# Default: 10.
postgres_cfg_maintenance_io_concurrency: 10

# Limit size of data reads and writes.
#
# Values:
#   {SIZE}: SIZE specification, 8kB-256kB.
#
# Default: '128kB'.
postgres_cfg_io_combine_limit: '128kB'

# Max number of concurrent worker processes. Default: 8.
postgres_cfg_max_worker_processes: 8

# Max parallel workers per executor node.
#
# Limited by max_parallel_workers.
#
# Default: 2.
postgres_cfg_max_parallel_workers_per_gather: 2

# Max parallel maintenance workers per maintenance operation.
#
# Limited by max_parallel_workers.
#
# Default: 2.
postgres_cfg_max_parallel_maintenance_workers: 2

# Max number of parallel workers that can be active at one time.
#
# max_worker_processes that can be used in parallel.
#
# Default: 8.
postgres_cfg_max_parallel_workers: 8

# Enable parallel leader participation?
#
# Controls whether Gather and Gather Merge also run subplans.
#
# Default: True.
postgres_cfg_parallel_leader_participation: true

#############################################################################
# Write-Ahead Log (WAL)
#############################################################################

# Level of information written to the WAL.
#
# Values:
#   minimal: Remove all logging except the information required to recover
#            from a crash or immediate shutdown.
#   replica: Write enough data to support WAL archiving and replication,
#            including running read-only queries on a standby server
#            (default).
#   logical: Adds information necessary to support logical decoding.
#
# Default: 'replica'.
postgres_cfg_wal_level: 'replica'

# Enable force synchronization of updates to disk?
#
# Disabling may cause unrecoverable data corruption.
#
# Default: True.
postgres_cfg_fsync: true

# Transaction synchronization level.
#
# synchronous_standby_names must be set for local,
# remote_write, remote_apply to work.
#
# Values:
#          False: Do not wait for local flush of WAL to disk (may be a delay
#                 between success reported to client and transaction is later
#                 guaranteed to be safe against a server crash).
#          local: Wait for local flush to disk, but not for replication.
#   remote_write: Wait until replies from the current synchronous standby
#                 indicate they have received the commit record of the
#                 transaction and written it to their file systems.
#   remote_apply: Wait until replies from the current synchronous standby
#                 indicate they have received the commit record of the
#                 transaction and applied it, so that it has become visible
#                 to queries on the standby, and also written to durable
#                 storage on the standbys.
#           True: Wait for local flush of WAL to disk (default).
#
# Default: True.
postgres_cfg_synchronous_commit: true

# Method used for forcing WAL updates to disk.
#
# Values:
#        open_datasync: Write WAL files with open() option.
#            fdatasync: Call fdatasync() at each commit.
#                fsync: Call fsync() at each commit.
#   fsync_writethrough: Call fsync() at each commit, forcing write-through of
#                       any disk write cache.
#            open_sync: Write WAL files with open() option.
#
# Default: 'fsync'.
postgres_cfg_wal_sync_method: 'fsync'

# Write full pages to WAL when first modified after a checkpoint?
#
# Turning this parameter off speeds normal operation, but might lead to
# either unrecoverable data corruption, or silent data corruption, after a
# system failure.
#
# Default: True.
postgres_cfg_full_page_writes: true

# Write full pages to WAL for non-critical updates? Default: False.
postgres_cfg_wal_log_hints: false

# Enable compression of full page writes to WAL?
#
# Values:
#   False: Disable (default).
#    pglz: pglz compression.
#     lz4: lz4 compression.
#    zstd: zstd compression.
#    True: Enable pglz.
#
# Default: False.
postgres_cfg_wal_compression: false

# Zero fill new WAL files? Default: True.
postgres_cfg_wal_init_zero: true

# Recycle WAL files by renaming them? Default: True.
postgres_cfg_wal_recycle: true

# Number of disk-page buffers in shared memory for WAL.
#
# Values:
#   {SIZE}: SIZE specification, minimum 32kB.
#       -1: Sets values based on shared_buffers (default).
#
# Default: -1.
postgres_cfg_wal_buffers: -1

# Time between WAL flushes performed in the WAL writer.
#
# values:
#   {TIME}: TIME specification, 10-10000ms.
#
# Default: '200ms'.
postgres_cfg_wal_writer_delay: '200ms'

# Amount of WAL written out by WAL writer that triggers a flush.
#
# Values:
#   {SIZE}: SIZE specification.
#        0: Disabled.
#
# Default: '1MB'.
postgres_cfg_wal_writer_flush_after: '1MB'

# Minimum size of new file to fsync instead of writing WAL.
#
# Values:
#   {SIZE}: SIZE specification.
#        0: Disabled.
#
# Default: '2MB'.
postgres_cfg_wal_skip_threshold: '2MB'

# WAL commit delay to flush transaction to disk (µs) (0-100000). Default: 0.
postgres_cfg_commit_delay: 0

# Minimum concurrent open transactions before performing commit_delay.
#
# values:
#   1-1000: number of connections.
#
# Default: 5.
postgres_cfg_commit_siblings: 5

# Max time between automatic WAL checkpoints.
#
# values:
#   {TIME}: TIME specification, 30s-1d.
#
# Default: '5min'.
postgres_cfg_checkpoint_timeout: '5min'

# Time spent flushing dirty buffers during checkpoint.
#
# Values:
#   {FLOAT}: Fraction of checkpoint interval, 0.0-1.0.
#
# Default: 0.9.
postgres_cfg_checkpoint_completion_target: 0.9

# Number of pages after which previously writes are flushed to disk.
#
# Values:
#   {SIZE}: SIZE specification, 0kB-2MB.
#
# Default: '256kB'.
postgres_cfg_checkpoint_flush_after: '256kB'

# Max time before warning WAL triggered checkpoints happen too frequently.
#
# Values:
#   {TIME}: TIME specification.
#
# Default: '30s'.
postgres_cfg_checkpoint_warning: '30s'

# Max WAL size that triggers a checkpoint.
#
# Values:
#   {SIZE}: SIZE specification, minimum 2MB.
#
# Default: '1GB'.
postgres_cfg_max_wal_size: '1GB'

# Minimum size to shrink the WAL to.
#
# Values:
#   {SIZE}: SIZE specification, minimum 2MB.
#
# Default: '80MB'.
postgres_cfg_min_wal_size: '80MB'

# Prefetch referenced blocks during recovery.
#
# Values:
#    True: Enable.
#     try: Enable prefetching only if the operating system provides
#          posix_fadvise function (default).
#   False: Disabled.
#
# Default: 'try'.
postgres_cfg_recovery_prefetch: 'try'

# Buffer size for reading ahead in the WAL during recovery.
#
# Values:
#   {SIZE}: SIZE specification, minimum 64kB.
#
# Default: '512kB'.
postgres_cfg_wal_decode_buffer_size: '512kB'

# Enable archiving of WAL files using archive_command?
#
# Default: False.
postgres_cfg_archive_mode: false

# Library called to archive a WAL file.
#
# Values:
#       '': Archiving via shell is enabled, and archive_command used (default).
#   {PATH}: Path to library to use.
#
# Default: ''.
postgres_cfg_archive_library: ''

# Shell command that will be called to archive a WAL file.
#
# It is important for the command to return a zero exit status only if it
# succeeds. For more information see backup-archiving-wal.
#
# Special Case:
#   %p: Path name of the file to archive.
#   %f: File name to archive.
#   %%: Embed an actual % character in the command.
#
# archive_command:
#   'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
#
# Default: ''.
postgres_cfg_archive_command: ''

# Time to wait before forcing a switch to the next WAL file (seconds).
#
# Values:
#   {TIME}: TIME specification.
#
# Default: 0.
postgres_cfg_archive_timeout: 0

# Shell command that will be called to retrieve an archived WAL file.
#
# It is important for the command to return a zero exit status only if it
# succeeds.
#
# Special Case:
#   %p: Path name of the file to archive.
#   %f: File name to archive.
#   %%: Embed an actual % character in the command.
#
# restore_command: 'cp /mnt/server/archivedir/%f %p'
#
# Default: ''.
postgres_cfg_restore_command: ''

# Shell command that will be executed at every restart point.
#
# Special Case:
#   %r: Name of the file containing the last valid restart point.
#   %%: Embed an actual % character in the command.
#
# archive_cleanup_command:
#   'pg_archivecleanup /mnt/server/archivedir %r'
#
# Default: ''.
postgres_cfg_archive_cleanup_command: ''

# Shell command that will be executed once at the end of recovery.
#
# Special Case:
#   %r: Name of the file containing the last valid restart point.
#   %%: Embed an actual % character in the command.
#
# Default: ''.
postgres_cfg_recovery_end_command: ''

# End recovery as soon as a consistent state is reached.
#
# Special Case:
#   immediate: only current allowed value. Enables.
#
# Default: '' (disabled).
postgres_cfg_recovery_target: ''

# Named restore point up to which recovery will proceed. Default: ''.
postgres_cfg_recovery_target_name: ''

# Time stamp up to which recovery will proceed.
#
# Special Case:
#   *: Time stamp in the same format accepted by the timestamp with time zone
#      data type, except that you cannot use a time zone abbreviation (unless
#      the timezone_abbreviations variable has been set
#      earlier in the configuration file). Preferred style is to use a
#      numeric offset from UTC, or you can write a full time zone name, e.g.,
#      Europe/Helsinki not EEST.
#
# Default: '' (disabled).
postgres_cfg_recovery_target_time: ''

# Transaction ID up to which recovery will proceed. Default: ''.
postgres_cfg_recovery_target_xid: ''

# LSN of the write-ahead log location up to which recovery will proceed.
#
# Default: '' (disabled).
postgres_cfg_recovery_target_lsn: ''

# Enable transaction with recovery target?
#
# Values:
#    True: Just after the specified recovery target.
#   False: Just before the recovery target.
#
# Default: True.
postgres_cfg_recovery_target_inclusive: true

# Specifies the timeline to recover into.
#
# Values:
#   current: Recovers along the same timeline that was current when the base
#            backup was taken.
#    latest: Recovers to the latest timeline found in the archive, which is
#            useful in a standby server (default).
#      {ID}: Timeline ID to use (prefix with '0x' for hex).
#
# Default: 'latest'.
postgres_cfg_recovery_target_timeline: 'latest'

# Action to perform upon reaching the recovery target.
#
# Values:
#      pause: Recovery will be paused.
#    promote: Recovery process will finish and the server will start to
#             accept connections.
#   shutdown: Stop the server after reaching the recovery target.
#
# Default: 'pause'.
postgres_cfg_recovery_target_action: 'pause'

# Enable WAL summarizer process to enable incremental backup? Default: False.
postgres_cfg_summarize_wal: false

# Time for which WAL summary files should be kept.
#
# Values:
#   {TIME}: TIME specification.
#        0: Never.
#
# Default: '10d'.
postgres_cfg_wal_summary_keep_time: '10d'

#############################################################################
# Replication
#############################################################################
# Set these on primary and on any standby that will send replication data.

# Max number of simultaneously running WAL sender processes. Default: 10.
postgres_cfg_max_wal_senders: 10

# Max number of simultaneously defined replication slots. Default: 10.
postgres_cfg_max_replication_slots: 10

# Size of WAL files held for standby servers.
#
# Values:
#   {SIZE}: SIZE specification.
#        0: Disabled (default).
#
# Default: 0.
postgres_cfg_wal_keep_size: 0

# Max WAL size that can be reserved by replication slots.
#
# Values:
#   {SIZE}: SIZE specification.
#       -1: Retain an unlimited amount of WAL files (default).
#
# Default: -1.
postgres_cfg_max_slot_wal_keep_size: -1

# Max time to wait for WAL replication.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled.
#
# Default: '60s'.
postgres_cfg_wal_sender_timeout: '60s'

# Enable collection transaction commit time? Default: False.
postgres_cfg_track_commit_timestamp: false

# Standby servers that can support synchronous replication.
#
# If there are one or more active synchronous standbys; transactions waiting
# for commit will be allowed to proceed after these standby servers confirm
# receipt of their data. The synchronous standbys will be those whose names
# appear in this list, and that are both currently connected and streaming
# data in real-time (as shown by a state of streaming in the
# pg_stat_replication view). Specifying more than one synchronous standby can
# allow for very high availability and protection against data loss.
#
# Special Case:
#   {NAME}: For physical replication use primary_conninfo, cluster_name, or
#           walreciever. For logical replication use connection information
#           of the subscription (subscription name).
#        *: Match any standby name.
#
# Value must be valid SQL in the format of:
#   [FIRST] num_sync ( standby_name [, ...] )
#   ANY num_sync ( standby_name [, ...] )
#   standby_name [, ...]
#
# Default: ''
#
# Reference:
# * https://postgresqlco.nf/doc/en/param/synchronous_standby_names/
postgres_cfg_synchronous_standby_names: ''

# List of streaming replication standby server replication slot names.
#
# Logical WAL sender processes will wait for these.
#
# Default: [].
postgres_cfg_synchronized_standby_slots: []

# Connection string to be used to connect to the sending server. Default: ''.
postgres_cfg_primary_conninfo: ''

# Name of the replication slot to use on the sending server. Default: ''.
postgres_cfg_primary_slot_name: ''

# Enable connections and queries during recovery? Default: True.
postgres_cfg_hot_standby: true

# Max delay before canceling queries from hot standby server (archived).
#
# When processing archived WAL data.
#
# Values:
#   {TIME}: TIME specification.
#       -1: infinite delay.
#
# Default: '30s'.
postgres_cfg_max_standby_archive_delay: '30s'

# Max delay before canceling queries from hot standby server (streamed).
#
# When processing streamed WAL data.
#
# Values:
#   {TIME}: TIME specification.
#       -1: infinite delay.
#
# Default: '30s'.
postgres_cfg_max_standby_streaming_delay: '30s'

# Enable temp replication slot if no permanent slot configured?
#
# Default: False.
postgres_cfg_wal_receiver_create_temp_slot: false

# Max interval between WAL receiver status reports to the sending server.
#
# Values:
#   {TIME}: TIME specification.
#
# Default: '10s'.
postgres_cfg_wal_receiver_status_interval: 10s

# Enable feedback from hot standby to primary that avoids query conflicts?
#
# Default: False.
postgres_cfg_hot_standby_feedback: false

# Max wait time to receive data from the sending server.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled.
#
# Default: '60s'.
postgres_cfg_wal_receiver_timeout: '60s'

# Time to wait before retrying to retrieve WAL after a failed attempt.
#
# Values:
#   {TIME}: TIME specification, minimum 1s.
#        0: Disabled.
#
# Default: '5s'.
postgres_cfg_wal_retrieve_retry_interval: '5s'

# Minimum delay for applying changes during recovery.
#
# Values:
#   {TIME}: TIME specification.
#
# Default: 0.
postgres_cfg_recovery_min_apply_delay: 0

# Enable standby sync logical failover replication slots from primary server?
#
# Default: False.
postgres_cfg_sync_replication_slots: false

# Max number of logical replication worker processes.
#
# Logical replication workers are taken from the pool defined by
# max_worker_processes.
#
# Default: 4.
postgres_cfg_max_logical_replication_workers: 4

# Max number of table synchronization workers per subscription.
#
# The synchronization workers are taken from the pool defined by
# postgres_postgrest_max_logical_replication_workers.
#
# Default: 2.
postgres_cfg_max_sync_workers_per_subscription: 2

# Max number of parallel apply workers per subscription.
#
# The parallel apply workers are taken from the pool defined by
# max_logical_replication_workers.
#
# Default: 2.
postgres_cfg_max_parallel_apply_workers_per_subscription: 2

#############################################################################
# Query Tuning
#############################################################################

# Enable planner use of async append plans? Default: True.
postgres_cfg_enable_async_append: true

# Enable planner use of bitmap-scan plans? Default: True.
postgres_cfg_enable_bitmapscan: true

# Enable planner use of gather-merge plans? Default: True.
postgres_cfg_enable_gathermerge: true

# Enable planner use of hashed aggregation plans? Default: True.
postgres_cfg_enable_hashagg: true

# Enable planner use of hashed join plans? Default: True.
postgres_cfg_enable_hashjoin: true

# Enable planner use of incremental sort plans? Default: True.
postgres_cfg_enable_incremental_sort: true

# Enable planner use of index-scan plans? Default: True.
postgres_cfg_enable_indexscan: true

# Enable planner use of index-only-scan plans? Default: True.
postgres_cfg_enable_indexonlyscan: true

# Enable planner use of materialization? Default: True.
postgres_cfg_enable_material: true

# Enable planner use of memoization? Default: True.
postgres_cfg_enable_memoize: true

# Enable planner use of merge join plans? Default: True.
postgres_cfg_enable_mergejoin: true

# Enable planner use of nested-loop join plans? Default: True.
postgres_cfg_enable_nestloop: true

# Enable planner use of parallel append plans? Default: True.
postgres_cfg_enable_parallel_append: true

# Enable planner use of parallel hash plans? Default: True.
postgres_cfg_enable_parallel_hash: true

# Enable plan-time and execution-time partition pruning? Default: True.
postgres_cfg_enable_partition_pruning: true

# Enable partitionwise join? Default: False.
postgres_cfg_enable_partitionwise_join: false

# Enable partitionwise aggregation and grouping? Default: False.
postgres_cfg_enable_partitionwise_aggregate: false

# Enable planner ability to provide presorted input? Default: True.
#
# Produce plans that provide presorted input for ORDER BY / DISTINCT
# aggregate.
#
# Default: True.
postgres_cfg_enable_presorted_aggregate: true

# Enable planner use of sequential-scan plans? Default: True.
postgres_cfg_enable_seqscan: true

# Enable planner use of explicit sort steps? Default: True.
postgres_cfg_enable_sort: true

# Enable planner use of TID scan plans? Default: True.
postgres_cfg_enable_tidscan: true

# Enable reordering of GROUP BY keys? Default: True.
postgres_cfg_enable_group_by_reordering: true

# Planner estimate cost of a sequentially fetched disk page.
#
# Values:
#   {FLOAT}: Disk page fetch cost.
#
# Default: 1.0.
postgres_cfg_seq_page_cost: 1.0

# Planner estimate cost of a non-sequentially fetched disk page.
#
# Values:
#   {FLOAT}: Disk page fetch cost.
#
# Default: 4.0.
postgres_cfg_random_page_cost: 4.0

# Planner estimate cost of processing each tuple (row).
#
# Values:
#   {FLOAT}: CPU row processing cost.
#
# Default: 0.01.
postgres_cfg_cpu_tuple_cost: 0.01

# Planner estimate cost of processing each index entry during scan.
#
# Values:
#   {FLOAT}: CPU index entry processing cost.
#
# Default: 0.005.
postgres_cfg_cpu_index_tuple_cost: 0.005

# Planner estimate cost of processing each operator or function call.
#
# Values:
#   {FLOAT}: CPU operator or function processing cost.
#
# Default: 0.0025.
postgres_cfg_cpu_operator_cost: 0.0025

# Planner estimate cost of starting worker processes for parallel query.
#
# Values:
#   {FLOAT}: Launching parallely workers processing cost.
#
# Default: 1000.0.
postgres_cfg_parallel_setup_cost: 1000.0

# Planner estimate cost of passing each tuple (row) to leader backend.
#
# Values:
#   {FLOAT}: Transfer cost of one tuple to another process.
#
# Default: 0.1.
postgres_cfg_parallel_tuple_cost: 0.1

# Minimum amount of table data for a parallel scan.
#
# Values:
#   {SIZE}: SIZE specification.
#
# Default: '8MB'.
postgres_cfg_min_parallel_table_scan_size: '8MB'

# Minimum amount of index data for a parallel scan.
#
# Values:
#   {SIZE}: SIZE specification.
#
# Default: '512kB'.
postgres_cfg_min_parallel_index_scan_size: '512kB'

# Planner assumption about the total size of the data caches.
#
# Values:
#   {SIZE}: SIZE specification, minimum 8kB.
#
# Default: '4GB'.
postgres_cfg_effective_cache_size: '4GB'

# Perform JIT compilation if query is more expensive.
#
# Value:
#    #: Query cost above which JIT compilation is activated.
#   -1: Disabled.
#
# Default: 100000
postgres_cfg_jit_above_cost: 100000

# Perform JIT inlining if query is more expensive.
#
# Value:
#    #: Query cost above which JIT inlining functions is activated.
#   -1: Disabled.
#
# Default: 500000
postgres_cfg_jit_inline_above_cost: 500000

# Optimize JIT-compiled functions if query is more expensive.
#
# Value:
#    #: Query cost above which JIT compilation applies expensive
#       optimizations.
#   -1: Disabled.
#
# Default: 500000
postgres_cfg_jit_optimize_above_cost: 500000

# Enable genetic query optimization? Default: True.
postgres_cfg_geqo: true

# Threshold of FROM items beyond which GEQO is used.
#
# Value:
#   #: FROM threshold, minimum 2.
#
# Default: 12.
postgres_cfg_geqo_threshold: 12

# Default for other GEQO parameters.
#
# Value:
#   #: FROM threshold, 1-10.
#
# Default: 5.
postgres_cfg_geqo_effort: 5

# GEQO number of individuals in the population. Default: 0.
postgres_cfg_geqo_pool_size: 0

# GEQO number of iterations of the algorithm. Default: 0.
postgres_cfg_geqo_generations: 0

# GEQO selective pressure within the population.
#
# Value:
#   {FLOAT}: Selection bias, 1.5-2.0.
#
# Default: 2.0.
postgres_cfg_geqo_selection_bias: 2.0

# GEQO seed for random path selection.
#
# Value:
#   {FLOAT}: Initial seed for random number generator, 0.0-1.0.
#
# Default: 2.0.
postgres_cfg_geqo_seed: 0.0

# Default statistics target.
#
# Value:
#   #: Statistics target, 1-10000.
#
# Default: 100.
postgres_cfg_default_statistics_target: 100

# Enable planner to use constraints to optimize queries.
#
# Value:
#        True: Examine constraints for all tables
#   partition: Examine constraints only for inheritance child tables
#              (default).
#       False: Never examine constraints.
#
# Default: 'partition'.
postgres_cfg_constraint_exclusion: 'partition'

# Planner estimate of cursor row fraction that will be retrieved.
#
# Value:
#   {FLOAT}: Planner estimate, 0.0-1.0.
#
# Default: 0.1.
postgres_cfg_cursor_tuple_fraction: 0.1

# FROM-list size beyond which subqueries are not collapsed.
#
# Setting this value to geqo_threshold or more may trigger
# use of the GEQO planner, resulting in non-optimal plans. See
# runtime-config-query-geqo.
#
# Value:
#   #: list size, minimum 1.
#
# Default: 8.
postgres_cfg_from_collapse_limit: 8

# Enable JIT compilation? Default: True.
postgres_cfg_jit: true

# FROM-list size beyond which JOIN constructs are not collapsed.
#
# Setting this value to geqo_threshold or more may trigger
# use of the GEQO planner, resulting in non-optimal plans. See
# runtime-config-query-geqo.
#
# Value:
#   #: list size, minimum 1.
#   1: Disabled.
#
# Default: 8.
postgres_cfg_join_collapse_limit: 8

# Controls planner selection of custom or generic plan.
#
# Value:
#                 auto: Automatically decided (default).
#    force_custom_plan: Custom plans are made afresh for each execution using
#                       its specific set of parameter values.
#   force_generic_plan: Generic plans do not rely on the parameter values and
#                       can be re-used across executions.
#
# Default: 'auto'.
postgres_cfg_plan_cache_mode: 'auto'

# Planner estimate of average size of a recursive query working table.
#
# Value:
#   {FLOAT}: Working table size, 0.001-1000000.
#
# Default: 10.0.
postgres_cfg_recursive_worktable_factor: 10.0

#############################################################################
# Reporting And Logging
#############################################################################

# List of log destination for server log output.
#
# Values:
#     stderr: Standard error.
#     csvlog: CSV file, requires logging_collector=true.
#    jsonlog: JSON file, requires logging_collector=true.
#     syslog: Syslog.
#   eventlog: Windows only.
postgres_cfg_log_destination:
  - 'stderr'

# Start subprocess to capture stderr, csvlog, jsonlog into log files?
#
# Default: False.
postgres_cfg_logging_collector: false

# Destination directory for log files.
#
# May be absolute path or relative path to cluster data directory.
#
# Default: 'log'.
postgres_cfg_log_directory: 'log'

# File name pattern for log files.
#
# Uses strftime patterns.
#
# Default: 'postgresql-%Y-%m-%d_%H%M%S.log'.
postgres_cfg_log_filename: 'postgresql-%Y-%m-%d_%H%M%S.log'

# Octal file creation permissions for log files. Default: '0600'.
postgres_cfg_log_file_mode: '0600'

# Amount of time to wait before forcing log file rotation.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled.
#
# Default: '1d'.
postgres_cfg_log_rotation_age: '1d'

# Max size a log file can reach before being rotated.
#
# Values:
#   {SIZE}: SIZE specification.
#        0: Disabled.
#
# Default: '10MB'.
postgres_cfg_log_rotation_size: '10MB'

# Truncate existing log files of same name during log rotation?
#
# Default: False.
postgres_cfg_log_truncate_on_rotation: false

# Syslog facility to use when syslog enabled.
#
# Values:
#   LOCAL0: LOCAL0 (default).
#   LOCAL1: LOCAL1.
#   LOCAL2: LOCAL2.
#   LOCAL3: LOCAL3.
#   LOCAL4: LOCAL4.
#   LOCAL5: LOCAL5.
#   LOCAL6: LOCAL6.
#   LOCAL7: LOCAL7.
#
# Default: 'LOCAL0'.
postgres_cfg_syslog_facility: 'LOCAL0'

# Name to identify PostgreSQL messages in syslog. Default: 'postgres'.
postgres_cfg_syslog_ident: 'postgres'

# Avoid duplicate suppression by adding sequence numbers? Default: True.
postgres_cfg_syslog_sequence_numbers: true

# Split messages by lines and to fit into 1024 bytes? Default: True.
postgres_cfg_syslog_split_messages: true

# Name to identify PostgreSQL messages in event log. Default: 'PostgresQL'.
postgres_cfg_event_source: 'PostgreSQL'

# Message levels that are logged.
#
# Each level includes all the levels that follow it. The later the level, the
# fewer messages are sent to the log.
#
# Values
#    debug5: Debug level 5 + debug4.
#    debug4: Debug level 4 + debug3.
#    debug3: Debug level 3 + debug2.
#    debug2: Debug level 2 + debug1.
#    debug1: Debug level 1 + info.
#      info: Info message + warning.
#    notice: Notice messages + warning.
#   warning: Warning messages + error (default).
#     error: Error messages + log.
#       log: Log message + fatal
#     fatal: Fatal erors + panic.
#     panic: Panic errors.
#
# Default: 'warning'.
postgres_cfg_log_min_messages: 'warning'

# All statements generating error at or above this level to be logged.
#
# Each level includes all the levels that follow it. The later the level, the
# fewer messages are sent to the log.
#
# Values
#    debug5: Debug level 5 + debug4.
#    debug4: Debug level 4 + debug3.
#    debug3: Debug level 3 + debug2.
#    debug2: Debug level 2 + debug1.
#    debug1: Debug level 1 + info.
#      info: Info message + warning.
#    notice: Notice messages + warning.
#   warning: Warning messages + error.
#     error: Error messages + log (default).
#       log: Log message + fatal
#     fatal: Fatal erors + panic.
#     panic: Panic errors.
#
# Default: 'error'.
postgres_cfg_log_min_error_statement: 'error'

# Minimum execution time above which all statements will be logged.
#
# Values:
#    0: Log all statements.
#   -1: Disabled (default).
#
# Default: -1.
postgres_cfg_log_min_duration_statement: -1


# Minimum execution time above which a sample of statements will be logged.
#
# Sampling is determined by log_statement_sample_rate.
#
# Values:
#    0: Log all statements.
#   -1: Disabled (default).
#
# Default: -1.
postgres_cfg_log_min_duration_sample: -1

# Fraction of statements exceeding log_statement_sample_rate.
#
# Values:
#   1.0: Log all statements (default).
#   0.0: Disabled.
#
# Default: 1.0.
postgres_cfg_log_statement_sample_rate: 1.0

# Fraction of transactions from which to log all statements.
#
# Values:
#   1.0: Log all statements (default).
#   0.0: Disabled.
#
# Default: 0.0.
postgres_cfg_log_transaction_sample_rate: 0.0

# Time between progress updates for long-running startup operations.
#
# Values:
#   {TIME}: TIME specification.
#
# Default: '10s'.
postgres_cfg_log_startup_progress_interval: '10s'

# Enable logging of each query parse tree? Default: False.
postgres_cfg_debug_print_parse: false

# Enable logging of each query rewritten parse tree? Default: False.
postgres_cfg_debug_print_rewritten: false

# Tablespaces for temporary tables and sort files. Default: '' (default)
postgres_cfg_debug_print_plan: false

# Enable indents parse and plan tree displays? Default: True.
postgres_cfg_debug_pretty_print: true

# Minimum execution time above which autovacuum actions will be logged.
#
# Values:
#   {TIME}: TIME specification.
#       -1: Disabled.
#
# Default: '10min'.
postgres_cfg_log_autovacuum_min_duration: '10min'

# Enable logging of each checkpoint? Default: True.
postgres_cfg_log_checkpoints: true

# Enable logging of each successful connection? Default: False.
postgres_cfg_log_connections: false

# Enable logging of end of a session, including duration? Default: False.
postgres_cfg_log_disconnections: false

# Enable logging of duration of each completed SQL statement? Default: False.
postgres_cfg_log_duration: false

# verbosity of logged messages.
#
# Values:
#     terse: Exclude logging of DETAIL, HINT, QUERY, CONTEXT error
#            information.
#   default: terse + DETAIL, HINT, QUERY, CONTEXT error information.
#   verbose: default + SQLSTATE error code (see also errcodes-appendix) and
#            the source code file name, function name, and line number that
#            generated the error.
#
# Default: 'default'.
postgres_cfg_log_error_verbosity: 'default'

# Enable logging of host name in the connection logs? Default: False.
postgres_cfg_log_hostname: false

# Information prefixed to each log line.
#
# Values:
#   %a: Application name.
#   %u: User name.
#   %d: Database name.
#   %r: Remote host and port.
#   %h: Remote host.
#   %b: Backend type.
#   %p: Process ID.
#   %P: Process ID of parallel group leader.
#   %t: Timestamp without milliseconds.
#   %m: Timestamp with milliseconds.
#   %n: Timestamp with milliseconds (as a Unix epoch).
#   %Q: Query ID (0 if none or not computed).
#   %i: Command tag.
#   %e: SQL state.
#   %c: Session ID.
#   %l: Session line number.
#   %s: Session start timestamp.
#   %v: Virtual transaction ID.
#   %x: Transaction ID (0 if none).
#   %q: Stop here in non-session processes.
#   %%: '%'.
#
# Default: '%m [%p] %q%u@%d '.
postgres_cfg_log_line_prefix: '%m [%p] %q%u@%d '

# Enable logging of long lock waits?
#
# Triggers when a session waits longer than deadlock_timeout
# to acquire a lock.
#
# Default: False.
postgres_cfg_log_lock_waits: false

# Enable logging of standby recovery conflict waits?
#
# Triggers when a standby recovery conflict waits longer than
# deadlock_timeout to acquire a lock.
#
# Default: False.
postgres_cfg_log_recovery_conflict_waits: false

# Max length for bind parameter values when logging (bytes).
#
# Values:
#    #: Number of bytes allowed.
#   -1: Log full message (default).
#    0: Disabled.
#
# Default: -1.
postgres_cfg_log_parameter_max_length: -1

# Max length for bind parameter values when logging errors (bytes).
#
# Values:
#    #: Number of bytes allowed.
#   -1: Log full message.
#    0: Disabled (default).
#
# Default: 0.
postgres_cfg_log_parameter_max_length_on_error: 0

# Type of statements logged.
#
# Values:
#   none: Off (default).
#    ddl: Log all data definition statements, such as CREATE, ALTER, and DROP
#         statements.
#    mod: ddl + plus data-modifying statements such as INSERT, UPDATE,
#         DELETE, TRUNCATE, and COPY FROM. PREPARE, EXECUTE, and EXPLAIN
#         ANALYZE.
#
# Default: 'none'.
postgres_cfg_log_statement: 'none'

# Enable logging of each replication command? Default: False.
postgres_cfg_log_replication_commands: false

# Log temp file used larger than this number of kilobytes.
#
# Values:
#   {SIZE}: SIZE specification.
#       -1: Disabled (default).
#
# Default: -1.
postgres_cfg_log_temp_files: -1

# Time zone to use in log messages. Default: 'Etc/UTC'.
postgres_cfg_log_timezone: 'Etc/UTC'

# Cluseter name included in the process title. Default: '17/main'.
postgres_cfg_cluster_name: '17/main'

# Enable updating process title to show active SQL command? Default: True.
postgres_cfg_update_process_title: true

#############################################################################
# Statistics
#############################################################################

# Enable information collection about executing commands? Default: True.
postgres_cfg_track_activities: true

# Size reserved for pg_stat_activity.query (bytes).
#
# Values:
#   {SIZE}: SIZE specification, minimum 100B.
#
# Default: 1024.
postgres_cfg_track_activity_query_size: 1024

# Enable statistics collection on database activity? Default: True.
postgres_cfg_track_counts: true

# Enable timing statistics collection for database I/O activity?
#
# Default: False.
postgres_cfg_track_io_timing: false

# Enable timing statistics collection for WAL I/O activity? Default: False.
postgres_cfg_track_wal_io_timing: false

# Collect function-level statistics on database activity.
#
# Values:
#   none: Disabled (default).
#     pl: Track only procedural-language functions.
#    all: pl + track SQL and C language functions.
#
# Default: 'none'.
postgres_cfg_track_functions: 'none'

# Consistency of accesses to statistics data.
#
# Values:
#       none: Each access re-fetches counters from shared memory (default).
#      cache: First access to statistics for an object caches those
#             statistics until the end of the transaction unless
#             pg_stat_clear_snapshot() is called.
#   snapshot: First statistics access caches all statistics accessible in the
#             current database, until the end of the transaction unless
#             pg_stat_clear_snapshot() is called.
#
# Default: 'cache'.
postgres_cfg_stats_fetch_consistency: 'cache'

# In-core computation of query identifiers.
#
# Values:
#      True: Always enabled.
#      auto: Let modules automatically enable (default).
#   regress: auto, except that the query identifier is not shown in EXPLAIN
#            output in order to facilitate automated regression testing.
#     False: Always disabled.
#
# Default: 'auto'.
postgres_cfg_compute_query_id: 'auto'

# Enable cumulative performance statistics write to server log?
#
# Default: False.
postgres_cfg_log_statement_stats: false

# Enable parser performance statistics write to server log? Default: False.
postgres_cfg_log_parser_stats: false

# Enable planner performance statistics write to server log? Default: False.
postgres_cfg_log_planner_stats: false

# Enable executor performance statistics write to server log? Default: False.
postgres_cfg_log_executor_stats: false

#############################################################################
# Autovacuum
#############################################################################

# Enable autovacuum subprocess?
#
# Requires track_counts=True.
#
# Default: True.
postgres_cfg_autovacuum: true

# Max number of simultaneously running autovacuum worker processes.
#
# Values:
#   #: Simultaneous autovacuum workers, minimum 1.
#
# Default: 3.
postgres_cfg_autovacuum_max_workers: 3

# Time to sleep between autovacuum runs.
#
# Values:
#   {TIME}: TIME specification, minimum 1s.
#
# Default: '1min'.
postgres_cfg_autovacuum_naptime: '1min'

# Minimum number of tuple updates or deletes prior to vacuum. Default: 50.
postgres_cfg_autovacuum_vacuum_threshold: 50

# Minimum number of tuple inserts prior to vacuum.
#
# Values:
#    #: Insert prior to vaccuum.
#   -1: Disabled.
#
# Default: 1000.
postgres_cfg_autovacuum_vacuum_insert_threshold: 1000

# Minimum number of tuple inserts, updates, deletes prior to analyze.
#
# Default: 50.
postgres_cfg_autovacuum_analyze_threshold: 50

# Number of tuple updates, deletes prior to vacuum.
#
# Table size to add to autovacuum_vacuum_threshold
# when deciding whether to trigger a VACUUM.
#
# Values:
#   #: Updates or deletes, 0.0-100.0.
#
# Default: 0.2.
postgres_cfg_autovacuum_vacuum_scale_factor: 0.2

# Number of tuple inserts prior to vacuum.
#
# Table size to add to autovacuum_vacuum_insert_threshold
# when deciding whether to trigger a VACUUM.
#
# Values:
#   #: Insert, 0.0-100.0.
#
# Default: 0.2.
postgres_cfg_autovacuum_vacuum_insert_scale_factor: 0.2

# Number of tuple inserts, updates, deletes prior to vacuum.
#
# Table size to add to autovacuum_vacuum_analyze_threshold
# when deciding whether to trigger a ANALYZE.
#
# Values:
#   #: Insert, 0.0-100.0.
#
# Default: 0.1.
postgres_cfg_autovacuum_analyze_scale_factor: 0.1

# Age when to autovacuum a table to prevent transaction ID wraparound.
#
# Values:
#   #: Number of transactions, 100000-2000000000.
#
# Default: 200000000.
postgres_cfg_autovacuum_freeze_max_age: 200000000

# Multixact age to autovacuum a table to prevent multixact wraparound.
#
# Values:
#   #: Number of multixacts, 100000-2000000000.
#
# Default: 400000000.
postgres_cfg_autovacuum_multixact_freeze_max_age: 400000000

# Vacuum cost delay for autovacuum.
#
# Values:
#   {TIME}: TIME specification, 0ms-100ms.
#       -1: Use postgres_postgrest_vacuum_cost_delay.
#
# Default: '2ms'.
postgres_cfg_autovacuum_vacuum_cost_delay: '2ms'

# Vacuum cost amount available before napping, for autovacuum.
#
# Values:
#    #: Cost limit value, 0-10000.
#   -1: Use postgres_postgrest_vacuum_cost_limit.
#
# Default: -1.
postgres_cfg_autovacuum_vacuum_cost_limit: -1

#############################################################################
# Client Connection Defaults
#############################################################################

# Message levels that are sent to the client.
#
# Each level includes all the levels that follow it. The later the level, the
# fewer messages are sent.
#
# Values
#    debug5: Debug level 5 + debug4.
#    debug4: Debug level 4 + debug3.
#    debug3: Debug level 3 + debug2.
#    debug2: Debug level 2 + debug1.
#    debug1: Debug level 1 + log.
#       log: Log message + notice.
#    notice: Notice messages + warning.
#   warning: Warning messages + error.
#     error: Error messages + log (default).
#
# Default: 'notice'.
postgres_cfg_client_min_messages: 'notice'

# Schema search order for names that are not schema-qualified.
#
# Default:
#   - '"$user"'
#   - 'public'.
postgres_cfg_search_path:
  - '"$user"'
  - 'public'

# Enable row security? Default: True.
postgres_cfg_row_security: true

# Default table access method for new tables. Default: 'heap'.
postgres_cfg_default_table_access_method: 'heap'

# Default tablespace to create tables and indexes in. Default: '' (default).
postgres_cfg_default_tablespace: ''

# Default compression method for compressible values.
#
# Values
#    pglz: pglz compression (default).
#     lz4: lz4 compression.
#
# Default: 'pglz'.
postgres_cfg_default_toast_compression: 'pglz'

# Tablespaces for temporary tables and sort files. Default: '' (default).
postgres_cfg_temp_tablespaces: ''

# Enable routine bodies checking during CREATE FUNCTION, CREATE PROCEDURE.
#
# Default: True.
postgres_cfg_check_function_bodies: true

# Transaction isolation level of each new transaction.
#
# Values:
#         serializable: serializable.
#    'repeatable read': repeatable read.
#     'read committed': read committed (default).
#   'read uncommitted': read uncommitted.
#
# Default: 'read committed'.
postgres_cfg_default_transaction_isolation: 'read committed'

# Enable default read-only status of new transactions? Default: False.
postgres_cfg_default_transaction_read_only: false

# Enable default deferrable status of new transactions? Default: False.
postgres_cfg_default_transaction_deferrable: false

# Session behavior for triggers and rewrite rules.
#
# Values:
#    origin: Origin (default).
#   replica: Use when applying replicated changes. Since foreign keys are
#            implemented as triggers, setting this parameter to replica also
#            disables all foreign key checks, which can leave data in an
#            inconsistent state if improperly used.
#     local: Same as default, used to delineate for third-party systems.
#
# Default: 'origin'.
postgres_cfg_session_replication_role: 'origin'

# Max allowed duration of any statement.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled (default).
#
# Default: 0.
postgres_cfg_statement_timeout: 0

# Max allowed duration of any transaction within a session.
#
# Not a prepared transaction.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled (default).
#
# Default: 0.
postgres_cfg_transaction_timeout: 0

# Max allowed duration of any wait for a lock.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled (default).
#
# Default: 0.
postgres_cfg_lock_timeout: 0

# Max allowed idle time between queries, when in a transaction.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled (default).
#
# Default: 0.
postgres_cfg_idle_in_transaction_session_timeout: 0

# Max allowed idle time between queries, when not in a transaction.
#
# Values:
#   {TIME}: TIME specification.
#        0: Disabled (default).
#
# Default: 0.
postgres_cfg_idle_session_timeout: 0

# Age when VACUUM should scan whole table to freeze tuples.
#
# Values:
#   #: relfrozenxid transactions, 0-2000000000.
#
# Default: 150000000.
postgres_cfg_vacuum_freeze_table_age: 150000000

# Minimum age when VACUUM should freeze a table row.
#
# Values:
#   #: transactions, 0-1000000000.
#
# Default: 50000000.
postgres_cfg_vacuum_freeze_min_age: 50000000

# Age when VACUUM should trigger failsafe to avoid a wraparound outage.
#
# Values:
#   #: relfrozenxid transactions, 0-2100000000.
#
# Default: 1600000000.
postgres_cfg_vacuum_failsafe_age: 1600000000

# Multixact age when VACUUM should scan whole table to freeze tuples.
#
# Values:
#   #: multixacts transactions, 0-2000000000.
#
# Default: 150000000.
postgres_cfg_vacuum_multixact_freeze_table_age: 150000000

# Minimum age when VACUUM should freeze a MultiXactId in a table row.
#
# Values:
#   #: multixacts transactions, 0-1000000000.
#
# Default: 5000000.
postgres_cfg_vacuum_multixact_freeze_min_age: 5000000

# Multixact age when VACUUM triggers failsafe to avoid a wraparound outage.
#
# Values:
#   #: multixacts transactions, 0-2100000000.
#
# Default: 1600000000.
postgres_cfg_vacuum_multixact_failsafe_age: 1600000000

# Output format for bytea.
#
# Values:
#   escape: Traditional PostgreSQL format.
#      hex: Use hexidecimal (default).
#
# Default: 'hex'.
postgres_cfg_bytea_output: 'hex'

# Binary values encoding for XML.
#
# Values:
#   base64: Base64 (default).
#      hex: hexidecimal.
#
# Default: 'base64'.
postgres_cfg_xmlbinary: 'base64'

# Implicit XML data type for parsing and serialization operations.
#
# Values:
#    content: CONTENT (default).
#   document: DOCUMENT.
#
# Default: 'content'.
postgres_cfg_xmloption: 'content'

# Max size of the pending list for GIN index.
#
# Values:
#   {SIZE}: SIZE specification, minimum 64kB.
#
# Default: '4MB'.
postgres_cfg_gin_pending_list_limit: '4MB'

# List of CREATEROLE options automatically granted to the role user.
#
# If a user who has CREATEROLE but not SUPERUSER creates a role, and if this
# is set to a non-empty value, the newly-created role will be granted to the
# creating user with the options specified.
#
# Values:
#       set: Automatically gain the ability to SET ROLE to any created users.
#   inherit: Inherit privileges.
#        '': Disabled (default).
#
# Default: [] (disabled).
postgres_cfg_createrole_self_grant: []

# Enable event triggers? Default: True.
postgres_cfg_event_triggers: true

# Display format for date and time values.
#
# datestyle:
#     list of str - Display format specification.
#   - output: str - output format specification.
#       Values:
#              iso:
#              sql:
#           german:
#         postgres:
#   - input_output: str - input/output specification for year/month/day.
#       Values:
#                euro: DMY.
#            european: DMY.
#                  us: MDY.
#             noneuro: MDY.
#         noneuropean: MDY.
#                 DMY: day-month-year.
#                 MDY: month-day-year.
#                 YMD: year-month-day.
#
# Default:
#  - 'iso'
#  - 'mdy'
postgres_cfg_datestyle:
  - 'iso'
  - 'mdy'

# Display format for interval values.
#
# Values:
#           postgres: ISO output.
#   postgres_verbose: non-ISO output.
#       sql_standard: SQL standard interval literals.
#           iso_8601: ISO-8601.
#
# Default: 'postgres'.
postgres_cfg_intervalstyle: 'postgres'

# Time zone for displaying and interpreting time stamps. Default: 'Etc/UTC'.
postgres_cfg_timezone: 'Etc/UTC'

# File of time zone abbreviations to accept.
#
# Custom files may be placed in share/timezonesets/ and referenced by name.
#
# Values:
#     Default: Works in most of the world (default).
#   Australia: Historical usage.
#       India: India.
#
# Default: 'Default'.
postgres_cfg_timezone_abbreviations: 'Default'

# Number of digits displayed for floating-point values.
#
# Values:
#     1-3: Float values are output in shortest-precise format.
#   -15-0: Rounded to a given decimal precision.
#
# Default: 1.
postgres_cfg_extra_float_digits: 1

# Client's character set encoding. Default: 'sql_ascii'.
postgres_cfg_client_encoding: 'sql_ascii'

# Language in which messages are displayed.
#
# Locales will automatically be generated and installed.
#
# Default: 'C.UTF-8'.
postgres_cfg_lc_messages: 'C.UTF-8'

# Locale for formatting monetary amounts.
#
# Locales will automatically be generated and installed.
#
# Default: 'C.UTF-8'.
postgres_cfg_lc_monetary: 'C.UTF-8'

# Locale for formatting numbers.
#
# Locales will automatically be generated and installed.
#
# Default: 'C.UTF-8'.
postgres_cfg_lc_numeric: 'C.UTF-8'

# Locale for formatting date and time values.
#
# Locales will automatically be generated and installed.
#
# Default: 'C.UTF-8'.
postgres_cfg_lc_time: 'C.UTF-8'

# Log level for reporting invalid ICU locale strings.
#
# Values
#   disabled: Does not report validation problems at all.
#     debug5: Debug level 5 + debug4.
#     debug4: Debug level 4 + debug3.
#     debug3: Debug level 3 + debug2.
#     debug2: Debug level 2 + debug1.
#     debug1: Debug level 1 + info.
#       info: Info message + warning.
#     notice: Notice messages + warning.
#    warning: Warning messages + error (default).
#      error: Error messages + log.
#
# Default: 'warning'.
postgres_cfg_icu_validation_level: 'warning'

# Default text search configuration. Default: 'pg_catalog.english'.
postgres_cfg_default_text_search_config: 'pg_catalog.english'

# List of unprivileged shared libraries to preload into each backend.
#
# Specifies one or more shared libraries that are to be preloaded at
# connection start. It contains a comma-separated list of library names,
# where each name is interpreted as for the LOAD command.
#
# Special Case:
#   "": Use double quotes if whitespace or commas are needed.
#
# Default: [].
postgres_cfg_local_preload_libraries: []

# List of shared libraries to preload into each backend.
#
# Specifies one or more shared libraries that are to be preloaded at
# connection start. It contains a comma-separated list of library names,
# where each name is interpreted as for the LOAD command.
#
# Special Case:
#   "": Use double quotes if whitespace or commas are needed.
#
# Default: [].
postgres_cfg_session_preload_libraries: []

# List of shared libraries to preload into server.
#
# Specifies one or more shared libraries that are to be preloaded at
# connection start. It contains a comma-separated list of library names,
# where each name is interpreted as for the LOAD command.
#
# Special Case:
#   "": Use double quotes if whitespace or commas are needed.
#
# Default: [].
postgres_cfg_shared_preload_libraries: []

# JIT provider to use. Default: 'llvmjit'.
postgres_cfg_jit_provider: 'llvmjit'

# List of absolute directory paths for dynamically loadable modules.
#
# Special Case:
#   ^$libdir: Compiled-in PostgreSQL package library directory is substituted
#             for $libdir; this is where the modules provided by the standard
#             PostgreSQL distribution are installed. (Use pg_config
#             --pkglibdir to find out the name of this directory).
#
# Default:
#   - '$libdir'
postgres_cfg_dynamic_library_path:
  - '$libdir'

# Prepend path when loading extensions and shared objects (debian only).
#
# Default: ''.
postgres_cfg_extension_destdir: ''

# Max allowed result for exact search by GIN. Default: 0.
postgres_cfg_gin_fuzzy_search_limit: 0

#############################################################################
# Lock Management
#############################################################################

# Time to wait on a lock before checking for deadlock.
#
# Values:
#   {TIME}: TIME specification, minimum 1ms.
#
# Default: '1s'.
postgres_cfg_deadlock_timeout: '1s'

# Max number of locks per transaction (minimum 10). Default: 64.
postgres_cfg_max_locks_per_transaction: 64

# Max number of predicate locks per transaction (minimum 10). Default: 64.
postgres_cfg_max_pred_locks_per_transaction: 64

# Max number of predicate-locked pages and tuples per relation.
#
# Values:
#   0+: Absolute limit.
#   <0: max_pred_locks_per_transaction /
#       (abs)max_pred_locks_per_relation.
#
# Default: -2.
postgres_cfg_max_pred_locks_per_relation: -2

# Max number of predicate-locked tuples per page. Default: 2.
postgres_cfg_max_pred_locks_per_page: 2

#############################################################################
# Version And Platform Compatibility
#############################################################################

# Enable input of NULL elements in arrays? Default: True.
postgres_cfg_array_nulls: true

# Sets whether "\'" is allowed in string literals.
#
# Values:
#            True: Always allow.
#   safe_encoding: Allow only if client encoding does not allow ASCII \
#                  within a multibyte character (default).
#           False: Always reject.
#
# Default: 'safe_encoding'.
postgres_cfg_backslash_quote: 'safe_encoding'

# Enable warning backslash escapes in ordinary string literals?
#
# Default: True.
postgres_cfg_escape_string_warning: true

# Enable backward compatibility mode for privilege checks on large objects?
#
# Default: False.
postgres_cfg_lo_compat_privileges: false

# Enable quoting all identifiers when generating SQL fragments?
#
# Default: False.
postgres_cfg_quote_all_identifiers: false

# Enable '...' strings to treat backslashes literally? Default: True.
postgres_cfg_standard_conforming_strings: true

# Enable synchronized sequential scans? Default: True.
postgres_cfg_synchronize_seqscans: true

# Enable treating "expr=NULL" as "expr IS NULL". Default: False.
postgres_cfg_transform_null_equals: false

# Enable running the ALTER SYSTEM command? Default: True.
postgres_cfg_allow_alter_system: true

#############################################################################
# Error Handling
#############################################################################

# Enable terminate session on any error? Default: False.
postgres_cfg_exit_on_error: false

# Enable reinitialize server after backend crash? Default: True.
postgres_cfg_restart_after_crash: true

# Enable continue running after a failure to sync data files? Default: False.
postgres_cfg_data_sync_retry: false

# Method for synchronizing the data directory before crash recovery.
#
# Values:
#    fsync: Recursively open and synchronize all files in the data directory
#           before crash recovery begins (default).
#   syncfs: Ask the operating system to synchronize the file systems that
#           contain the data directory, the WAL files and each tablespace
#           (but not any other file systems that may be reachable through
#           symbolic links). Kernel 5.8+.
postgres_cfg_recovery_init_sync_method: 'fsync'

###############################################################################
# Config File Includes
###############################################################################
# Included at end of postgres.conf in presented order.

# List of configuration directories.
#
# Replaced by the contents of all the files found in the directory.
#
# Special Case:
#   {FILE}: Must end in '.conf' and not be hidden dotfiles (.{FILE}).
#        *: Processed in file name order (C locale rules) - numbers before
#           letters, and uppercase before lowercase.
#        *: Cannot overlap directories with postgres_cfg_hba_include_dir,
#           postgres_cfg_ident_include_dir.
#
# Default:
#   - 'conf.d'
postgres_cfg_include_dir:
  - 'conf.d'

# List of files to include if they exist.
#
# Replaced by the content of the given file if the file exists. Otherwise, a
# message is logged to indicate that the file has been skipped.
#
# Special Case:
#   @: Files included by @ constructs are read as lists of names, which can be
#      separated by either whitespace or commas and nested @ constructs are
#      allowed. Unless the file name following @ is an absolute path, it is
#      taken to be relative to the directory containing the referencing file.
#
# Default: [].
postgres_cfg_include_if_exists: []

# List of files to include.
#
# Replaced by the contents of the given file. Fatal error if file is missing.
#
# Special Case:
#   @: Files included by @ constructs are read as lists of names, which can be
#      separated by either whitespace or commas and nested @ constructs are
#      allowed. Unless the file name following @ is an absolute path, it is
#      taken to be relative to the directory containing the referencing file.
#
# Default: [].
postgres_cfg_include: []
