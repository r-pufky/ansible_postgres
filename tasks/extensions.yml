---
# yamllint disable rule:line-length
###############################################################################
# Manage User Extensions.
###############################################################################
# Imported DB's need to have permissions re-propagated. Use psql command line
# if user option is defined, otherwise depend on user configuring permissions
# correctly via owner and priv extensions.
#
# This allows for more granular controller of user permissions by the role
# consumer.
#
# Args:
#   user: dict - user from postgres_cfg_users.
#
# Reference:
# * https://github.com/ansible/ansible/issues/29774
# * https://semisignal.com/postgresql-database-import-with-ansible/
# * https://stackoverflow.com/questions/1348126/modify-owner-on-all-tables-simultaneously-in-postgresql
# yamllint enable rule:line-length

- name: 'Manage | users | extensions | database_owner'
  when: user.extensions.database_owner is defined
  ansible.builtin.command:
    argv:
      - '{{ _postgres_cfg_databases._owner_script }}'
      - '{{ item }}'
      - '{{ user.name }}'
  register: _postgres_owner_script
  failed_when: _postgres_owner_script.rc != 0
  changed_when: true
  become: true
  become_user: '{{ _postgres_srv_user.raw }}'
  loop: '{{ user.extensions.database_owner }}'

- name: 'Manage | users | extensions | owner'
  when: user.extensions.owner is defined
  community.postgresql.postgresql_owner:
    ca_cert: '{{
        (user.ca_cert
         if user.ca_cert is defined else
         _postgres_srv_user_connection.raw.ca_cert) |
        default(omit)
      }}'
    connect_params: '{{
        (user.connect_params
         if user.connect_params is defined else
         _postgres_srv_user_connection.raw.connect_params) |
        default({})
      }}'
    login_db: '{{
        (owner.login_db
         if owner.login_db is defined else
         user.login_db) |
        default(omit)
      }}'
    fail_on_role: '{{ owner.fail_on_role | default(omit) }}'
    login_host: '{{
        (user.login_host
         if user.login_host is defined else
         _postgres_srv_user_connection.raw.login_host) |
        default("localhost")
      }}'
    login_password: '{{
        (user.login_password
         if user.login_password is defined else
         _postgres_srv_user_connection.raw.login_password) |
        default(omit)
      }}'
    login_unix_socket: '{{
        (user.login_unix_socket
         if user.login_unix_socket is defined else
         _postgres_srv_user_connection.raw.login_unix_socket) |
        default(_postgres_cfg_unix_socket_directories.raw[0])
      }}'
    login_user: '{{
        (user.login_user
         if user.login_user is defined else
         _postgres_srv_user_connection.raw.login_user) |
        default("postgres")
      }}'
    new_owner:
      '{{ owner.new_owner if owner.new_owner is defined else user.name }}'
    obj_name: '{{ owner.obj_name | default(omit) }}'
    obj_type: '{{ owner.obj_type | default(omit) }}'
    port: '{{
        (user.port
         if user.port is defined else
         _postgres_srv_user_connection.raw.port) |
        default(_postgres_cfg_port.raw)
      }}'
    reassign_owned_by: '{{ owner.reassign_owned_by | default(omit) }}'
    session_role: '{{
        (user.session_role
         if user.session_role is defined else
         _postgres_srv_user_connection.raw.session_role) |
        default(omit)
      }}'
    ssl_cert: '{{
        (user.ssl_cert
         if user.ssl_cert is defined else
         _postgres_srv_user_connection.raw.ssl_cert) |
        default(omit)
      }}'
    ssl_key: '{{
        (user.ssl_key
         if user.ssl_key is defined else
         _postgres_srv_user_connection.raw.ssl_key) |
        default(omit)
      }}'
    ssl_mode: '{{
        (user.ssl_mode
         if user.ssl_mode is defined else
         _postgres_srv_user_connection.raw.ssl_mode) |
        default("prefer")
      }}'
    trust_input: '{{ user.trust_input | default(true) }}'
  become: true
  become_user: '{{ _postgres_srv_user.raw }}'
  loop: '{{ user.extensions.owner }}'
  loop_control:
    loop_var: 'owner'
    label: '{{
        owner.login_db ~ " " ~
        owner.new_owner | default(user.name) ~ ":" ~
        owner.obj_name | default("") ~ " " ~
        owner.obj_type | default("") ~ " " ~
        owner.reassign_owned_by | default("")
      }}'

- name: 'Manage | users | extensions | priv'
  when: user.extensions.priv is defined
  community.postgresql.postgresql_privs:
    ca_cert: '{{
        (user.ca_cert
         if user.ca_cert is defined else
         _postgres_srv_user_connection.raw.ca_cert) |
        default(omit)
      }}'
    connect_params: '{{
        (user.connect_params
         if user.connect_params is defined else
         _postgres_srv_user_connection.raw.connect_params) |
        default({})
      }}'
    login_db: '{{
        (priv.login_db
         if priv.login_db is defined else
         user.login_db) |
        default(omit)
      }}'
    fail_on_role: '{{ user.fail_on_user | default(true) }}'
    grant_option: '{{ priv.grant_option | default(omit) }}'
    login_host: '{{
        (user.login_host
         if user.login_host is defined else
         _postgres_srv_user_connection.raw.login_host) |
        default("localhost")
      }}'
    login_password: '{{
        (user.login_password
         if user.login_password is defined else
         _postgres_srv_user_connection.raw.login_password) |
        default(omit)
      }}'
    login_unix_socket: '{{
        (user.login_unix_socket
         if user.login_unix_socket is defined else
         _postgres_srv_user_connection.raw.login_unix_socket) |
        default(_postgres_cfg_unix_socket_directories.raw[0])
      }}'
    login_user: '{{
        (user.login_user
         if user.login_user is defined else
         _postgres_srv_user_connection.raw.login_user) |
        default("postgres")
      }}'
    objs: '{{ priv.objs | default(omit) }}'
    port: '{{
        (user.port
         if user.port is defined else
         _postgres_srv_user_connection.raw.port) |
        default(_postgres_cfg_port.raw)
      }}'
    privs: '{{ priv.privs | default(omit) }}'
    roles: '{{
        priv.roles
        if priv.roles is defined else
        user.name | default(omit)
      }}'
    schema: '{{ priv.schema | default(omit) }}'
    session_role: '{{
        (user.session_role
         if user.session_role is defined else
         _postgres_srv_user_connection.raw.session_role) |
        default(omit)
      }}'
    ssl_cert: '{{
        (user.ssl_cert
         if user.ssl_cert is defined else
         _postgres_srv_user_connection.raw.ssl_cert) |
        default(omit)
      }}'
    ssl_key: '{{
        (user.ssl_key
         if user.ssl_key is defined else
         _postgres_srv_user_connection.raw.ssl_key) |
        default(omit)
      }}'
    ssl_mode: '{{
        (user.ssl_mode
         if user.ssl_mode is defined else
         _postgres_srv_user_connection.raw.ssl_mode) |
        default("prefer")
      }}'
    state: '{{ user.state | default("present") }}'
    target_roles: '{{ priv.target_roles | default(omit) }}'
    trust_input: '{{ user.trust_input | default(true) }}'
    type: '{{ priv.type | default("table") }}'
  become: true
  become_user: '{{ _postgres_srv_user.raw }}'
  loop: '{{ user.extensions.priv }}'
  loop_control:
    loop_var: 'priv'
    label: '{{ priv.login_db }} {{ priv.type | default("") }} {{ priv.privs }}'
