---
# yamllint disable rule:line-length
###############################################################################
# Postgres Import DB
###############################################################################
# Manage the database and determine state based on executed commands from
# postgresql_db:
# * CREATE DATABASE - new database.
# * ALTER DATABASE - updated database.
# * DROP DATABASE - database removed.
#
# If the database is newly created, automatically attempt to import the latest
# backup if enabled.
#
# Imports using postgres_databases_backup_enable generate archives with a
# single file in it; otherwise copy a single text .sql file from the controller
# and execute import. If the import fails, cleanup the staged database.
#
# Args:
#   db: Postgres DB to manage.

- name: 'Manage | DB | {{ db.name }}'
  community.postgresql.postgresql_db:
    ca_cert: '{{ (db.ca_cert if user.ca_cert is defined else postgres_user_connection.ca_cert) | default(omit) }}'
    comment: '{{ db.comment | default(omit) }}'
    conn_limit: '{{ db.conn_limit | default(omit) }}'
    connect_params: '{{ (db.connect_params if user.connect_params is defined else postgres_user_connection.connect_params) | default({}) }}'
    dump_extra_args: '{{ db.dump_extra_args | default(omit) }}'
    encoding: '{{ db.encoding | default("UTF-8") }}'
    force: '{{ db.force | default(false) }}'
    icu_locale: '{{ db.icu_locale | default(omit) }}'
    lc_collate: '{{ db.lc_collate | default("en_US.UTF-8") }}'
    lc_ctype: '{{ db.lc_ctype | default("en_US.UTF-8") }}'
    locale_provider: '{{ db.locale_provider | default(omit) }}'
    login_host: '{{ (db.login_host if user.login_host is defined else postgres_user_connection.login_host) | default("localhost") }}'
    login_password: '{{ (db.login_password if user.login_password is defined else postgres_user_connection.login_password) | default(omit) }}'
    login_unix_socket: '{{ (db.login_unix_socket if user.login_unix_socket is defined else postgres_user_connection.login_unix_socket) | default(postgres_config.unix_socket_directories[0]) }}'
    login_user: '{{ (db.login_user if user.login_user is defined else postgres_user_connection.login_user) | default("postgres") }}'
    maintenance_db: '{{ db.maintenance_db | default("postgres") }}'
    name: '{{ db.name }}'
    owner: '{{ db.owner | default(postgres_user) }}'
    port: '{{ (db.port if user.port is defined else postgres_user_connection.port) | default(postgres_config.port) }}'
    session_role: '{{ (db.session_role if user.session_role is defined else postgres_user_connection.session_role) | default(omit) }}'
    ssl_cert: '{{ (db.ssl_cert if user.ssl_cert is defined else postgres_user_connection.ssl_cert) | default(omit) }}'
    ssl_key: '{{ (db.ssl_key if user.ssl_key is defined else postgres_user_connection.ssl_key) | default(omit) }}'
    ssl_mode: '{{ (db.ssl_mode if user.ssl_mode is defined else postgres_user_connection.ssl_mode) | default("prefer") }}'
    state: '{{ db.state | default("present") }}'
    tablespace: '{{ db.tablespace | default(omit) }}'
    target: '{{ db.target | default(omit) }}'
    target_opts: '{{ db.target_opts | default(omit) }}'
    template: '{{ db.template | default("template0") }}'
    trust_input: '{{ db.trust_input | default(true) }}'
  become: true
  become_user: '{{ postgres_user }}'
  register: _postgres_manage_db
  no_log: true  # passwords.

- name: 'Manage | DB | parse import options'
  ansible.builtin.set_fact:
    _postgres_db_created: '{{ true if "CREATE DATABASE" in _postgres_manage_db.executed_commands | join(" ") else false }}'
    _postgres_db_import_enable: '{{ db.extensions.db_import.enable | default(false) }}'
    _postgres_db_import_source: '{{ db.extensions.db_import.source | default("") }}'

- name: 'Manage | DB | import'
  when: _postgres_db_import_enable and _postgres_db_created
  block:
    - name: 'Manage | DB | import | copy from controller'
      when: _postgres_db_import_source | length > 0
      ansible.builtin.copy:
        src: '{{ _postgres_db_import_source }}'
        dest: '/tmp/postgres_db_import.sql'
        owner: '{{ postgres_user }}'
        group: '{{ postgres_group }}'
        mode: '0600'
        force: true

    - name: 'Manage | DB | import | copy from backups'
      when: _postgres_db_import_source | length == 0
      ansible.builtin.copy:
        src: '{{ postgres_databases_backup_dir }}/{{ db.name }}-latest.sql'
        dest: '/tmp/postgres_db_import.sql'
        remote_src: true
        owner: '{{ postgres_user }}'
        group: '{{ postgres_group }}'
        mode: '0600'
        force: true

    - name: 'Manage | DB | import | {{ db.name }}'
      community.postgresql.postgresql_db:
        ca_cert: '{{ (db.ca_cert if user.ca_cert is defined else postgres_user_connection.ca_cert) | default(omit) }}'
        comment: '{{ db.comment | default(omit) }}'
        conn_limit: '{{ db.conn_limit | default(omit) }}'
        connect_params: '{{ (db.connect_params if user.connect_params is defined else postgres_user_connection.connect_params) | default({}) }}'
        dump_extra_args: '{{ db.dump_extra_args | default(omit) }}'
        encoding: '{{ db.encoding | default("UTF-8") }}'
        force: '{{ db.force | default(false) }}'
        icu_locale: '{{ db.icu_locale | default(omit) }}'
        lc_collate: '{{ db.lc_collate | default("en_US.UTF-8") }}'
        lc_ctype: '{{ db.lc_ctype | default("en_US.UTF-8") }}'
        locale_provider: '{{ db.locale_provider | default(omit) }}'
        login_host: '{{ (db.login_host if user.login_host is defined else postgres_user_connection.login_host) | default("localhost") }}'
        login_password: '{{ (db.login_password if user.login_password is defined else postgres_user_connection.login_password) | default(omit) }}'
        login_unix_socket: '{{ (db.login_unix_socket if user.login_unix_socket is defined else postgres_user_connection.login_unix_socket) | default(postgres_config.unix_socket_directories[0]) }}'
        login_user: '{{ (db.login_user if user.login_user is defined else postgres_user_connection.login_user) | default("postgres") }}'
        maintenance_db: '{{ db.maintenance_db | default("postgres") }}'
        name: '{{ db.name }}'
        owner: '{{ db.owner | default(postgres_user) }}'
        port: '{{ (db.port if user.port is defined else postgres_user_connection.port) | default(postgres_config.port) }}'
        session_role: '{{ (db.session_role if user.session_role is defined else postgres_user_connection.session_role) | default(omit) }}'
        ssl_cert: '{{ (db.ssl_cert if user.ssl_cert is defined else postgres_user_connection.ssl_cert) | default(omit) }}'
        ssl_key: '{{ (db.ssl_key if user.ssl_key is defined else postgres_user_connection.ssl_key) | default(omit) }}'
        ssl_mode: '{{ (db.ssl_mode if user.ssl_mode is defined else postgres_user_connection.ssl_mode) | default("prefer") }}'
        state: 'restore'
        tablespace: '{{ db.tablespace | default(omit) }}'
        target: '/tmp/postgres_db_import.sql'
        target_opts: '{{ db.target_opts | default(omit) }}'
        template: '{{ db.template | default("template0") }}'
        trust_input: '{{ db.trust_input | default(true) }}'
      become: true
      become_user: '{{ postgres_user }}'
      no_log: true  # passwords.
  always:
    - name: 'Manage | DB | import | remove staged files'
      ansible.builtin.file:
        path: '/tmp/postgres_db_import.sql'
        state: 'absent'
