---
###############################################################################
# Postgres Config
###############################################################################
# Create user specified locations and initialize data (DB) location if it is
# not already done. Set global shell environment profile and write
# configuration to specified locations. Restart service to apply service
# changes (service must have new settings loaded to apply security, user, and
# database changes).
#
# Data locations may be mounted over network (with only postgres user and
# everything else mapping to nobody/nogroup). Execute commands touching those
# root mount points as postgres user to ensure they can be read or written.
#
# Default service does not log configuration errors on startup. This must be
# done manually to see what configuration issues are occurring. With a default
# installation location, run:
#
#   su - postgres
#   /usr/lib/postgresql/17/bin/postgres -d 3 \
#   -D /var/lib/postgresql/17/main \
#   -c config_file=/etc/postgresql/17/main/postgresql.conf
#
# Reference:
# * https://www.postgresql.org/docs/current/config-setting.html

- name: 'Config | check data directory initialization'
  ansible.builtin.stat:
    path: '{{ _postgres_cfg_data_directory.raw }}'
  become:
    '{{ true if _postgres_srv_user_data_manage_enable.raw else omit }}'
  become_user: '{{
      _postgres_srv_user.raw
      if _postgres_srv_user_data_manage_enable.raw else
      omit
    }}'
  register: _postgres_init

- name: 'Config | initialize data directory'
  when: not _postgres_init.stat.exists
  ansible.builtin.command:
    argv:
      - '{{ _postgres_cfg_data_directory.role }}'
      - '-D'
      - '{{ _postgres_cfg_data_directory.raw }}'
  become: true
  become_user: '{{ _postgres_srv_user.raw }}'
  changed_when: true

- name: 'Config | enable backups'
  when: _postgres_cfg_databases_backup_enable.raw
  block:
    - name: 'Config | enable backups | set backup directory'
      ansible.builtin.file:
        dest: '{{ _postgres_cfg_databases_backup_dir.raw }}'
        owner: '{{ _postgres_srv_user.parsed }}'
        group: '{{ _postgres_srv_group.parsed }}'
        mode: '0755'
        state: 'directory'

    - name: 'Config | enable backups | set scripts directory'
      ansible.builtin.file:
        dest: '{{ _postgres.scripts }}'
        owner: '{{ _postgres_srv_user.parsed }}'
        group: '{{ _postgres_srv_group.parsed }}'
        mode: '0755'
        state: 'directory'

    - name: 'Config | enable backups | set backup script'
      ansible.builtin.template:
        src: 'postgres_backup.j2'
        dest: '{{ _postgres_cfg_databases_backup_enable.role }}'
        owner: '{{ _postgres_srv_user.parsed }}'
        group: '{{ _postgres_srv_group.parsed }}'
        mode: '0700'

    - name: 'Config | enable backups | create backup service'
      ansible.builtin.include_role:
        name: 'r_pufky.deb.systemd'
      vars:
        systemd_services:
          - name: 'postgres_backup'
            state: 'present'
            drop_in: false
            unit:
              description: 'Postgres backup service.'
              requires: ['postgres_backup.timer']
            service:
              type: 'simple'
              exec_start: ['{{ _postgres_cfg_databases_backup_enable.role }}']
            exec:
              user: 'root'
              group: 'root'
        systemd_timers:
          - name: 'postgres_backup'
            state: 'present'
            drop_in: false
            unit:
              description: 'MariaDB backup service timer.'
            timer:
              unit: 'postgres_backup.service'
              on_calendar:
                - '{{ _postgres_cfg_databases_backup_schedule.raw }}'
            install:
              wanted_by: ['timers.target']

- name: 'Config | disable backups'
  when: not _postgres_cfg_databases_backup_enable.raw
  block:
    - name: 'Config | disable backups | set backup script'
      ansible.builtin.file:
        dest: '{{ _postgres_cfg_databases_backup_enable.role }}'
        state: 'absent'

    - name: 'Config | disable backups | remove backup service'
      ansible.builtin.include_role:
        name: 'r_pufky.deb.systemd'
      vars:
        systemd_services:
          - name: 'postgres_backup'
            state: 'absent'
            drop_in: false
        systemd_timers:
          - name: 'postgres_backup'
            state: 'absent'
            drop_in: false

- name: 'Config | create data directory'
  ansible.builtin.file:
    path: '{{ _postgres_cfg_data_directory.raw }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0700'
    state: 'directory'
  become:
    '{{ true if _postgres_srv_user_data_manage_enable.raw else omit }}'
  become_user: '{{
      _postgres_srv_user.raw
      if _postgres_srv_user_data_manage_enable.raw else
      omit
    }}'

- name: 'Config | create HBA directory'
  ansible.builtin.file:
    path: '{{ _postgres_cfg_hba_file.parsed }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0755'
    state: 'directory'

- name: 'Config | create ident directory'
  ansible.builtin.file:
    path: '{{ _postgres_cfg_ident_file.parsed }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0755'
    state: 'directory'

- name: 'Config | create PID directory'
  ansible.builtin.file:
    path: '{{ _postgres_cfg_external_pid_file.parsed }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '2775'
    state: 'directory'

# Custom data directories require setting shell environments correctly so they
# can be used (e.g. further in the role to manage postgres database).
- name: 'Config | set postgres global environment profile'
  when: _postgres_srv_profile_path.raw | length == 0
  ansible.builtin.template:
    src: 'postgres.j2'
    dest: '/etc/profile.d/postgres'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Config | set custom postgres global environment profile'
  when: _postgres_srv_profile_path.raw | length > 0
  ansible.builtin.copy:
    src: '{{ _postgres_srv_profile_path.role }}'
    dest: '/etc/profile.d/postgres'
    owner: 'root'
    group: 'root'
    mode: '0644'
    force: true

- name: 'Config | set database owner script'
  ansible.builtin.template:
    src: 'postgres_owner.j2'
    dest: '{{ _postgres_cfg_databases.role }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0700'

- name: 'Config | set conf.d'
  when: _postgres_srv_confd_path.raw | length > 0
  ansible.builtin.copy:
    src: '{{ _postgres_srv_confd_path.role }}'
    dest: '{{ _postgres.confd }}'
    owner: 'root'
    group: 'root'
    mode: '0640'
    force: true

- name: 'Config | set environment'
  ansible.builtin.template:
    src: 'environment.j2'
    dest: '{{ _postgres.environment }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0644'

- name: 'Config | set postgresql.conf'
  ansible.builtin.template:
    src: 'postgresql.conf.j2'
    dest: '{{ _postgres.postgresql }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0644'

- name: 'Config | set pg_ctl.conf'
  ansible.builtin.template:
    src: 'pg_ctl.conf.j2'
    dest: '{{ _postgres.pg_ctl }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0644'

- name: 'Config | set pg_hba.conf'
  ansible.builtin.template:
    src: 'pg_hba.conf.j2'
    dest: '{{ _postgres.pg_hba }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0640'

- name: 'Config | set pg_ident.conf'
  ansible.builtin.template:
    src: 'pg_ident.conf.j2'
    dest: '{{ _postgres.pg_ident }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0640'


- name: 'Config | set start.conf'
  ansible.builtin.template:
    src: 'start.conf.j2'
    dest: '{{ _postgres.start }}'
    owner: '{{ _postgres_srv_user.parsed }}'
    group: '{{ _postgres_srv_group.parsed }}'
    mode: '0644'

- name: 'Config | start services'
  ansible.builtin.systemd:
    name: '{{ item }}'
    enabled: true
    daemon_reload: true  # daemon-reload required for start.conf.
    state: 'restarted'
  failed_when: false
  loop:
    - 'postgresql.service'
